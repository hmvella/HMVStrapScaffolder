<#@ template language="C#" HostSpecific="True" Debug="True" #>
<#@ output extension="cs" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Data.Linq" #>
<#@ ScaffoldingAssembly Processor="ScaffoldingAssemblyLoader" #>
<#@ template debug="true" hostSpecific="true" #>
<#@ import namespace="System.Diagnostics" #>
<#
string routePrefix;
if (String.IsNullOrEmpty(AreaName)) 
{
    routePrefix = ControllerRootName;
}
else
{
    routePrefix = AreaName + "/" + ControllerRootName;
}
#>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="Microsoft.AspNet.Scaffolding.Core.Metadata" #>
<#@ parameter type="System.String" name="ControllerName" #>
<#@ parameter type="System.String" name="ControllerRootName" #>
<#@ parameter type="System.String" name="Namespace" #>
<#@ parameter type="System.String" name="AreaName" #>
<#@ parameter type="System.String" name="ContextTypeName" #>
<#@ parameter type="System.String" name="ModelTypeName" #>
<#@ parameter type="System.String" name="ModelVariable" #>
<#@ parameter type="Microsoft.AspNet.Scaffolding.Core.Metadata.ModelMetadata" name="ModelMetadata" #>
<#@ parameter type="System.String" name="EntitySetVariable" #>
<#@ parameter type="System.Boolean" name="UseAsync" #>
<#@ parameter type="System.Boolean" name="IsOverpostingProtectionRequired" #>
<#@ parameter type="System.String" name="BindAttributeIncludeText" #>
<#@ parameter type="System.String" name ="OverpostingWarningMessage" #>
<#@ parameter type="System.Collections.Generic.HashSet<System.String>" name="RequiredNamespaces" #>
using System;
using System.Collections.Generic;
using System.Data;
using System.Data.Entity;
using System.Linq;
using StatusUpdater.Models;
using StatusUpdater.Attribute;
using System.Dynamic;
using Newtonsoft.Json;
<# if (UseAsync) { #>
using System.Threading.Tasks;
<# } #>
using System.Net;
using System.Web;
using System.Web.Mvc;
<# foreach (var namespaceName in RequiredNamespaces) { #>
using <#= namespaceName #>;
<# } #>

namespace <#= Namespace #>
{
<#
    var contextTypeName = ContextTypeName;
    var entitySetName = ModelMetadata.EntitySetName;
    var entitySetVar = EntitySetVariable ?? (String.IsNullOrEmpty(entitySetName) ? entitySetName : (entitySetName.Substring(0, length:1).ToLowerInvariant() + entitySetName.Substring(1)));
    var primaryKeyName = ModelMetadata.PrimaryKeys[0].PropertyName;
    var primaryKeyShortTypeName = ModelMetadata.PrimaryKeys[0].ShortTypeName;
    var primaryKeyDefaultValue = ModelMetadata.PrimaryKeys[0].DefaultValue;
    var primaryKeyType = ModelMetadata.PrimaryKeys[0].TypeName;
    var primaryKeyNullableTypeName = GetNullableTypeName(primaryKeyType, primaryKeyShortTypeName);
    var lambdaVar = ModelVariable[0];
    var relatedProperties = ModelMetadata.RelatedEntities.ToDictionary(item => item.AssociationPropertyName);

    string bindAttribute;
    if (IsOverpostingProtectionRequired)
    {
        bindAttribute = String.Format("[Bind(Include = \"{0}\")] ", BindAttributeIncludeText);
    }
    else
    {
        bindAttribute = String.Empty;
    }
#>
    public class <#= ControllerName #> : Controller
    {
        private <#= ContextTypeName #> db = new <#= ContextTypeName #>();

        // GET: <#= routePrefix #>
<# if (UseAsync) { #>
        public async Task<ActionResult> Index()
<# } else { #>
        public ActionResult Index()
<# } #>
        {
<#  var includeExpressions = "";
        includeExpressions = String.Join("", relatedProperties.Values.Select(property => String.Format(".Include({0} => {0}.{1})", lambdaVar, property.AssociationPropertyName)));
#>
<# if(!String.IsNullOrEmpty(includeExpressions)) { #>
            var <#= entitySetVar #> = db.<#= entitySetName #><#= includeExpressions #>;
<#		if (UseAsync) { #>
            return View(await <#= entitySetVar #>.ToListAsync());
<#		} else { #>
            return View(<#= entitySetVar #>.ToList());
<#		} #>
<# } else { #>
<#		if (UseAsync) { #>
            return View(await db.<#= entitySetName #><#= includeExpressions #>.ToListAsync());
<#		} else { #>
            return View(db.<#= entitySetName #><#= includeExpressions #>.ToList());
<#		} #>
<# } #>
        }

        // GET: <#= routePrefix #>/Details/5
<# if (UseAsync) { #>
        public async Task<ActionResult> Details(<#= primaryKeyNullableTypeName #> id)
<# } else { #>
        public ActionResult Details(<#= primaryKeyNullableTypeName #> id)
<# } #>
        {
            if (id == null)
            {
                return new HttpStatusCodeResult(HttpStatusCode.BadRequest);
            }
<# if (UseAsync) { #>
            <#= ModelTypeName #> <#= ModelVariable #> = await db.<#= entitySetName #>.FindAsync(id);
<# } else { #>
            <#= ModelTypeName #> <#= ModelVariable #> = db.<#= entitySetName #>.Find(id);
<# } #>
            if (<#= ModelVariable #> == null)
            {
                return HttpNotFound();
            }
            return View(<#= ModelVariable #>);
        }

        // GET: <#= routePrefix #>/Create
        public ActionResult Create()
        {
<# foreach (var property in relatedProperties.Values) { #>
            ViewBag.<#= property.ForeignKeyPropertyNames[0] #> = new SelectList(db.<#= property.EntitySetName #>, "<#= property.PrimaryKeyNames[0] #>", "<#= property.DisplayPropertyName #>");
<# } #>
            return View();
        }


		protected override void Dispose(bool disposing)
        {
            if (disposing)
            {
                db.Dispose();
            }
            base.Dispose(disposing);
        }

        #region Bootstrap Table Functions


        [Audit]
        public ContentResult GetTableData(int inTake = 50, int inSkip = 1)
        {
            dynamic expandoObject = new ExpandoObject();

            List<<#= ModelTypeName #>> lst<#= ModelTypeName #> = db.<#= entitySetName #>.ToList<<#= ModelTypeName #>>();
            
			expandoObject.total = lst<#= ModelTypeName #>.Count();
            expandoObject.rows = lst<#= ModelTypeName #>;
			
            string json = JsonConvert.SerializeObject(expandoObject);
            ContentResult result = Content(json);
            return result;
        }


        [Audit]
        public ContentResult GetTableData(int inTake = 50, int inSkip = 0, string inSearch = "%", string inOrder = "Id", string inOrderBy = "asc")
        {
			List<string> lstPropNames = new List<string>();
			List<<#= ModelTypeName #>> lst<#= ModelTypeName #>;
			<# List<string> tmpStrLst = new List<string>(); #>
			
            dynamic expandoObject = new ExpandoObject();

			if (inSearch.Equals("%"))
			{
				lst<#= ModelTypeName #> = (	from itm in db.<#=ContextTypeName #>
											select new <#= ModelTypeName #>
											{
<#
												tmpStrLst.Clear();
												foreach (var property in ModelMetadata.Properties)
												{
													tmpStrLst.Add (string.Format("{0} = itm.{0}\n", property.PropertyName));
												}
												var st1 = string.Join(",", tmpStrLst);
#>
<#=
												st1
#>
											}
										  ).OrderBy(f => f.id).Skip(inSkip).Take(inTake).ToList<<#= ModelTypeName #>>();
			}
			else
			{
				lst<#= ModelTypeName #> = (	from itm in db.<#=ContextTypeName #>
											where
											(
<#
												tmpStrLst.Clear();
												foreach (var property in ModelMetadata.Properties) {
													tmpStrLst.Add(string.Format("itm.{0}.ToString()\n", property.PropertyName ));
												}
												var ss = string.Join("+", tmpStrLst);
#>
											<#= ss #>
											).Contains(inSearch)
											select new <#= ModelTypeName #>
											{
<#
												tmpStrLst.Clear();
												List<string> strlist = new List<string>();
												foreach (var property in ModelMetadata.Properties)
												{
													tmpStrLst.Add (string.Format("{0} = itm.{0}\n", property.PropertyName));
												}
												var st = string.Join(",", tmpStrLst);
#>
												<#= st #>
											}
										).OrderBy(f => f.Id).Skip(inSkip).Take(inTake).ToList<<#= ModelTypeName #>>();
			}

			expandoObject.total = lst<#= ModelTypeName #>.Count();
            expandoObject.rows = lst<#= ModelTypeName #>;
			
            string json = JsonConvert.SerializeObject(expandoObject);
            ContentResult result = Content(json);
            return result;
        }

		

		#endregion

        
    }
}
<#+
// This function converts the primary key short type name to its nullable equivalent when possible. This is required to make
// sure that an HTTP 400 error is thrown when the user tries to access the edit, delete, or details action with null values.
    string GetNullableTypeName(string typeName, string shortTypeName)
    {
        // The exceptions are caught because if for any reason the type is user defined, then the short type name will be used.
        // In that case the user will receive a server error if null is passed to the edit, delete, or details actions.
        Type primaryKeyType = null;
        try
        {
            primaryKeyType = Type.GetType(typeName);
        }
        catch
        {
        }
        if (primaryKeyType != null && (primaryKeyType.IsPrimitive || IsGuid(typeName)))
        {
            return shortTypeName + "?";
        }
        return shortTypeName;
    }

    bool IsGuid(string typeName) {
        return String.Equals("System.Guid", typeName, StringComparison.OrdinalIgnoreCase);
    }
#>